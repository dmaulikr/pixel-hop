<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16</depth>
  <persistent>0</persistent>
  <parentName>depth_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width / 2;
y = room_height + ( sprite_height * 1.5 );
actual_x = x;
actual_y = y;

sprite_index = spr_run;

state = "ready";

time = 0;

virtual_key_add( 0,
    ( display_get_height() / 4 ) + 8,
    display_get_width(),
    display_get_height() * 3 / 4, 
    vk_space );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( state == "running" or state == "jumping" ){
    global.xhead_shake = (10) * sin(((time/room_speed)*pi)/1.2);
    global.yhead_shake = (10) * sin(((time/room_speed)*pi*2)/1.2);
    time++; 
    
}

if ( state == "jumping" ){

    // first enter this state actions
    if( image_index == 0 and obj_mute.state == "off" ){
    
            audio_play_sound(snd_jump, true, 0);
        
    }
    
    // change from jump to run
    if( image_index &gt;= image_number-1 ){
        state = "running";
        sprite_index = spr_run;
        image_index = 0;
    }
    
    // score point only happens once
    // when the player hits the ground
    if( image_index &gt;= 21 and image_index &lt; 21 + image_speed ){
        if( instance_exists(obj_hole) and obj_hole.actual_y &gt; actual_y){
            obj_single.score_1++; 
            if( obj_mute.state == "off" ){ audio_play_sound(snd_score, true, 0); }
            
        }
        
        instance_create( actual_x, actual_y, obj_ground_impact );
    }
    
}
else if ( state == "spawning" ){
    actual_y -= 4;
    image_xscale = 1+ ((y-640)/(room_height+sprite_height-640) *.5 );
    image_yscale = 1+ ((y-640)/(room_height+sprite_height-640) *.5 );
    
    // reset everything.
    if ( actual_y &lt; 720 ){
        actual_y = 720;
        
        state = "running";
        image_speed = 1;
    }

}
else if  ( state == "dying" ){ 
    
    actual_y += 5;
    
    // make object smaller
    image_speed = 0;
    image_xscale = .85 * image_xscale;
    image_yscale = .85 * image_xscale;
    
    // rotate to look cool
    if( sprite_index = spr_jump ){ image_angle += 8; }
    else { image_angle -= 8; };
    
    // move towards center of hole
    if( actual_x-sprite_xoffset+(sprite_width/2) &lt; obj_hole.actual_x-obj_hole.sprite_xoffset+(obj_hole.sprite_width/2)-1 ){
        actual_x += 2;
    } 
    else if( actual_x-sprite_xoffset+(sprite_width/2) &gt; obj_hole.actual_x-obj_hole.sprite_yoffset+(obj_hole.sprite_height/2)+1 ){
        actual_x -= 2;
    }
    
    if( actual_y-sprite_yoffset+(sprite_height/2) &lt; obj_hole.actual_y-obj_hole.sprite_xoffset+(obj_hole.sprite_width/2)-1 ){
        actual_y += 4;
    } 
    else if( actual_y-sprite_yoffset+(sprite_height/2) &gt; obj_hole.actual_y-obj_hole.sprite_yoffset+(obj_hole.sprite_height/2)+1 ){
        actual_y -= 2;
    }
    
    
    // reset
    if ( image_xscale &lt; .1){
        sprite_index = spr_run;
        image_index = 0;
        image_speed = 1;
        image_xscale = 1;
        image_yscale = 1;
        image_angle = 0;
        depth = -16;
        
        actual_y = room_height+(sprite_height*1.5); 
        state = "ready";

    }
}


if ( state == "running" or state == "spawning" ){
    
    if ( image_index &gt;= 13 and image_index &lt; 13 + image_speed ){
    
        instance_create( actual_x, actual_y, obj_ground_impact );
    }
}


event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( sprite_index == spr_run and image_index &gt;= 12 and state != "dying" 
    or sprite_index == spr_jump and image_index &gt;= 20 and state != "dying"
){
    //post_score();
    state = "dying";
    image_speed = 1;
    depth = -11;
    if ( obj_mute.state == "off" ){ audio_play_sound(snd_fall, true, 0); }
    obj_game_master.spawned_hole_count = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if( state == "running" ){
    state = "jumping";
    sprite_index = spr_jump;
    image_index = 0;
    
}
else if( state == "ready" and instance_number(obj_hole) == 0 ){
    obj_single.score_1 = 0;
    obj_ten.score_2 = 0;
    obj_hund.score_3 = 0;
    
    state = "spawning";
    sprite_index = spr_run;
    image_index = 0;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>

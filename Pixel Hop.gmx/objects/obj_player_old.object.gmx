<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16</depth>
  <persistent>0</persistent>
  <parentName>depth_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2;
y = room_height+(sprite_height*1.5);
actual_x = x;
actual_y = y;

sprite_index = spr_run;

state = "ready";
//state = "respawn";
//enter_trigger = false; //??
//chosen = noone; 

time=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// dying
depth = -11;
state = "dying"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( state == "running" ){
    global.xhead_shake = 10 * sin(((time/room_speed)*pi)/1.2 +(pi/2));
    global.yhead_shake = 10 * sin(((time/room_speed)*pi*2)/1.2 +(pi/2));
    
    // score point
    if( sprite_index == spr_jump and image_index == 13 and state == "run" /*and incremented == false*/){
        if( instance_exists(obj_hole)){
            if( obj_hole.actual_y &gt; actual_y ){
                if( obj_mute.state == "off" ){
                    audio_play_sound(snd_score, true, 0);
                }
                obj_single.score_1++; 
                global.hole_queue --;
            }
        }
    }
    
    //play noise for jump
    if( sprite_index == spr_jump and image_index == 0 and obj_mute.state == "off" ){
        audio_play_sound(snd_jump, true, 0);
    }
    
    // change from jump to run
    if( sprite_index == spr_jump and image_index == image_number-1){
        sprite_index = spr_run;
        image_index = 0;
    }
    
    time++; 
}
else if ( state == "respawn" ){
    if ( enter_trigger == true and !instance_exists(obj_hole)){
        actual_y -= 4;
        image_xscale = 1+ ((y-640)/(room_height+sprite_height-640) *.5 );
        image_yscale = 1+ ((y-640)/(room_height+sprite_height-640) *.5 );
        
        obj_single.score_1 = 0;
        obj_ten.score_2 = 0;
        obj_hund.score_3 = 0;
    }
    // reset everything.
    if ( actual_y &lt; 640 ){
        actual_y = 640;
        
        obj_ground.spawn_hole = room_speed*4;
        obj_ground.spawn_hole_variance = 0;
        obj_ground.spawn_hole_time = 0;
        obj_ground.spawn_cloud_time = 0;
        
        global.hole_queue = 0;
        
        obj_ground.time = 0;
        state = "run";
        image_speed = 1;
        
        enter_trigger = false;
    }

}
else { 
    // first pass detector
    if ( image_xscale &gt;= .95){
        if ( obj_mute.state == "off" ){
            audio_play_sound(snd_fall, true, 0);
        }
        
        alarm[0] = 1;
    }
    
    actual_y +=8;
    
    // make object smaller
    image_speed = 0;
    image_xscale = .9 * image_xscale;
    image_yscale = .9 * image_xscale;
    
    // rotate to look cool
    if(sprite_index = spr_jump and image_index &gt;= 12 ) {image_angle += 8}
    else { image_angle -= 8 };
    
    
    // reset
    if ( image_xscale &lt; .1){
        sprite_index = spr_run;
        image_index = 0;
        image_xscale = 1;
        image_yscale = 1;
        image_angle = 0;
        image_speed = 1;
        depth = -10;
        
        actual_y = room_height+(sprite_height*1.5); 
        state = "respawn";
        
        obj_cloud.state = "exit";

    }
    
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( sprite_index == spr_run and image_index &gt;= 19 ){
    state = "exit";
}
else if( sprite_index == spr_jump and image_index &gt;= 23 ){
    state = "exit";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if( state == "run" and sprite_index != spr_jump ){
    sprite_index = spr_jump;
    image_index = 0;
}*/
/*else if( state == "respawn" ){
    enter_trigger = true;
}*/
if( state == "running" ){
    state = "jumping";
    sprite_index = spr_jump;
    image_index = 0;
}
else if( state == "ready" and instance_number(obj_hole) == 0 ){
    state = "spawning";
    sprite_index = spr_run;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>

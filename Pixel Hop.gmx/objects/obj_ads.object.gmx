<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*ini_open("data.ini")
    ads = ini_read_real( "game","ads", current_hour-1 );
ini_close()*/


ad = ads_enable(0,display_get_height(),0);
ads_move( (display_get_width()-ads_get_display_width(ad))/2, display_get_height() - ads_get_display_height(ad), ad);

/*if( ads != current_hour ){
    ad = ads_enable(0,display_get_height(),0);
    ads_move( 0, display_get_height() - ads_get_display_height(ad), ad);
    
    if( ads_get_display_width(ad) - display_get_width() &gt; sprite_width * display_get_width()/room_width ){
        ads_move(sprite_width * display_get_width()/room_width, display_get_height() - ads_get_display_height(ad), ad)
    }
    
    state = "ad";
} else {
    ad = ads_enable(0,display_get_height(),0);
    state = "noad";
    image_index = 2;
}


x = 0;
y = room_height - sprite_height;*/


// jump button for above ads and button
//virtual_key_add(0,display_get_height()/2,display_get_width(),display_get_height()/2 - ads_get_display_height(ad) - sprite_height/room_height*display_get_height() ,vk_space);

// if the screen is too small for both ads and close ads on same line, move the ads button up
// the whole bottom row where ads is becomes a jump button
/*if( ads_get_display_width(ad) - display_get_width() &lt;= sprite_width * display_get_width()/room_width and state == "ad"){
    // button is above ads
    y -= ads_get_display_height(ad) *room_height /display_get_height();
    
    // 2nd from bottom row button
    //height2_vk = virtual_key_add( (x+sprite_width)/room_width*display_get_width(), display_get_height() - ads_get_display_height(ad) - sprite_height/room_height*display_get_height(), display_get_width(), sprite_height/room_height*display_get_height() ,vk_space);
    
    // bottom row button
    //height1_vk = virtual_key_add( 0, display_get_height() - ads_get_display_height(ad), display_get_width(), ads_get_display_height(ad), vk_space);
}
// place jump button depending on where close ads button is if the screen is large enough
// place jump button to the right side of ads on the bottom of the screen
else {
    // 2nd from bottom row button
    //height2_vk = virtual_key_add( 0, display_get_height() - ads_get_display_height(ad) - sprite_height/room_height*display_get_height(), display_get_width(), sprite_height/room_height*display_get_height(), vk_space);
    
    // bottom row button
    //height1_vk = virtual_key_add( (x+sprite_width)/room_width*display_get_width(), display_get_height() - ads_get_display_height(ad), display_get_width(), ads_get_display_height(ad), vk_space);
}*/

// button for close ads
//closead_vkey = virtual_key_add( x/room_width*display_get_width(), y/room_height*display_get_height(), sprite_width/room_width*display_get_width(), sprite_height/room_height*display_get_height(), vk_f12 );


//image_speed = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if( state = "ad" and image_index == 2 ){
    image_speed = .2;
}
if( state = "ad" and image_index == 0 ){
    image_speed = 0;
}
if( state = "noad" and image_index == 0 ){
    image_speed = .2;
} 
if ( state = "noad" and image_index = 2 ){
    image_speed = 0;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if ( state = "ad" ){
    ini_open("data.ini")
        ini_write_real("game","ads", current_hour );
    ini_close();
    
    ads_move( 0, display_get_height(), ad );
    
    if( ads_get_display_width(ad) - display_get_width() &lt;= sprite_width * display_get_width()/room_width ){
        y = room_height - sprite_height;
        
        // move closead virtual key
        virtual_key_delete( closead_vkey )
        closead_vkey = virtual_key_add( x/room_width*display_get_width(), y/room_height*display_get_height(), sprite_width/room_width*display_get_width(), sprite_height/room_height*display_get_height(), vk_f12 );
        
        // move 2nd row button
        //virtual_key_delete( height2_vk );
        //height2_vk = virtual_key_add( 0, display_get_height() - ads_get_display_height(ad) - sprite_height/room_height*display_get_height(), display_get_width(), sprite_height/room_height*display_get_height(), vk_space);
   
        // move bottom row button
        //virtual_key_delete( height1_vk );
        //height1_vk = virtual_key_add( (x+sprite_width)/room_width*display_get_width(), display_get_height() - ads_get_display_height(ad), display_get_width(), ads_get_display_height(ad), vk_space);
    }

    state = "noad";
} else {

    ini_open("data.ini")
        ini_write_real("game","ads", current_hour-1 );
    ini_close();
    
    ads_move( 0, display_get_height() - ads_get_display_height(ad), ad)
    
    if( ads_get_display_width(ad) - display_get_width() &gt; sprite_width * display_get_width()/room_width ){
        ads_move( sprite_width * display_get_width()/room_width, display_get_height() - ads_get_display_height(ad), ad)
        
    } else {
        y = room_height - sprite_height - (ads_get_display_height(ad)/display_get_height() * room_height);
        
        // move closead virtual key
        virtual_key_delete( closead_vkey )
        closead_vkey = virtual_key_add( x/room_width*display_get_width(), y/room_height*display_get_height(), sprite_width/room_width*display_get_width(), sprite_height/room_height*display_get_height(), vk_f12 );
        
        // move 2nd row button
        //virtual_key_delete( height2_vk );
        //height2_vk = virtual_key_add( (x+sprite_width)/room_width*display_get_width(), display_get_height() - ads_get_display_height(ad) - sprite_height/room_height*display_get_height(), display_get_width(), sprite_height/room_height*display_get_height(), vk_space);
   
        // move bottom row button
        //virtual_key_delete( height1_vk );
        //height1_vk = virtual_key_add( 0, display_get_height() - ads_get_display_height(ad), display_get_width(), ads_get_display_height(ad), vk_space);
   
    }
    
    state = "ad";
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>

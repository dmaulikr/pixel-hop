<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grass2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>depth_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// for depth object
actual_x = floor(random(480));
actual_y = room_height/2;

start_x = actual_x;
start_y = actual_y;
// choose grass sprite
sprite_index = choose( spr_grass2, spr_grass3, spr_grass4, spr_grass5, spr_grass6, spr_grass7 ); 
saved_sprite = sprite_index;

// how far until bottom of screen
y_distance = room_height-start_y; 

image_index = 0;
image_speed = 0;
image_xscale = 0;
image_yscale = 0;

min_yspeed = 0.1;
max_yspeed = 4;
min_xspeed = 0;
max_xspeed = 0.8;

time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// parabolic movement for grass

temp_val = ( actual_y-start_y )/( room_height/4 );

if( obj_player.state == "dying" or obj_player.state == "ready" and instance_exists(obj_hole)){
    actual_y += (2*min_yspeed) + ((path_get_y(pth_depth_move, temp_val))/100 * (2*(max_yspeed-min_yspeed)));
}
else {
    actual_y += min_yspeed + ((path_get_y(pth_depth_move, temp_val))/100 * (max_yspeed-min_yspeed));
}

//temp_val = min(temp_val, 1);
if( actual_x &lt; room_width / 2 ) { 
    // t is how far the grass is from the edge of the screen
    t = ( room_width/2 - actual_x ) / ( room_width/2 );
    if( obj_player.state == "dying" or obj_player.state == "ready" and instance_exists( obj_hole ) ){
        t *= 2;
    }
    var xmove = ( path_get_y( pth_depth_xmove, temp_val ) ) /100 * ( max_xspeed - min_xspeed )// * t * temp_val; 
    
    if ( t &lt; .20 ) {
        xmove /= 2;
    }
    
    actual_x -= xmove; 
}
else{ 
    t = ( actual_x - room_width/2 ) / ( room_width/2 );
    if( obj_player.state == "dying" or obj_player.state == "ready" and instance_exists(obj_hole)){
        t *= 2;
    }
    
    xmove = ( path_get_y( pth_depth_xmove, temp_val )) /100 * ( max_xspeed-min_xspeed )// * t// * temp_val; 
    if ( t &lt; .20 ) 
        xmove /= 2;{
    }
    
    actual_x += xmove;
}

image_xscale = path_get_y( pth_depth_scale, temp_val ) /100;
image_yscale = path_get_y( pth_depth_scale, temp_val ) /100;

// depth object inheritance
event_inherited();
    
// how fast the grass grows
if ( actual_y &gt; room_height * 66 / 100 ) {
    image_index = 2;
} else if ( actual_y &gt; room_height * 58 / 100 ) {
    image_index = 1;
}


// stop grass from looping
//if( image_index &gt;= image_number - 1 ){ image_speed = 0; }

time++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,8</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>

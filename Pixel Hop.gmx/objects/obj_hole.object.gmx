<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hole</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>depth_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// for depth object
actual_x = room_width / 2;
actual_y = room_height / 2;

start_y = actual_y;

saved_sprite = sprite_index;

// how far until bottom of screen
y_distance = room_height-start_y; 

image_speed = 0;
image_xscale = 0;
image_yscale = 0;
if ( obj_game_master.spawned_hole_count &lt; 3 ){
    tiny = true;
} else {
    tiny = false;
}

min_yspeed = .1;
max_yspeed = 4;
time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>temp_val = ( actual_y-start_y )/( room_height/4 );
//temp_val = min(temp_val, 1);
if( obj_player.state == "dying" or obj_player.state == "ready" ){
    actual_y += (2*min_yspeed) + ((path_get_y(pth_depth_move, temp_val))/100 * (2*(max_yspeed-min_yspeed)));
}
else {
    actual_y += min_yspeed + ((path_get_y(pth_depth_move, temp_val))/100 * (max_yspeed-min_yspeed));
}
    
// how fast the hole grows
if ( tiny ){
    image_xscale = path_get_y( pth_depth_scale, temp_val ) / 110;
    image_yscale = path_get_y( pth_depth_scale, temp_val ) / 110;
    
} else {
    image_xscale = path_get_y( pth_depth_scale, temp_val ) / 100;
    image_yscale = path_get_y( pth_depth_scale, temp_val ) / 100;
    
}

// depth object inheritance
event_inherited();

grass = collision_rectangle( x- sprite_xoffset,
        y - sprite_yoffset,
        x - sprite_xoffset + sprite_width,
        y - sprite_yoffset + sprite_height,
        obj_grass, true, true )
while ( grass )
{
    
    hole_middle_y = y + ( sprite_height / 2 );
    
    if( grass.x &lt; x /*- ( sprite_width / 2)*/ ){
        grass.x -= 1;
        grass.actual_x -= 1;
    } else if ( grass.x &gt; x/* + ( sprite_width / 2 )*/ ){ 
        grass.x += 1; 
        grass.actual_x += 1;
    } else if( grass.y &lt;  hole_middle_y  ){
        grass.y -= 1;
        grass.actual_y -= 1;
    } else { 
        grass.y += 1; 
        grass.actual_y += 1;
    }
    
    
    /*var dx = grass.x - x;
    var dy = grass.y - y;
    var length = abs ( sqrt ( sqr ( dx ) + sqr ( dy ) ) );
    point_x = grass.x + ( dx / length );
    point_y = grass.y + ( dy / length );
       
    //show_debug_message( string( x ) + " " + string( y ) + " " + string(  point_x ) + " " +  string( point_y ) );
    
    grass.x = point_x;
    grass.y = point_y; 
    grass.actual_x = point_x;
    grass.actual_y = point_y; */
    
    
    grass = collision_rectangle( x - sprite_xoffset,
        y - sprite_yoffset,
        x - sprite_xoffset + sprite_width,
        y - sprite_yoffset + sprite_height,
        obj_grass, true, true )   
        
}

time++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>160,51</point>
    <point>180,180</point>
  </PhysicsShapePoints>
</object>
